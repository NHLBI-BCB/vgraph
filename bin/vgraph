#!/usr/bin/env python
# -*- coding: utf-8 -*-

## Copyright 2015 Kevin B Jacobs
##
## Licensed under the Apache License, Version 2.0 (the "License"); you may
## not use this file except in compliance with the License.  You may obtain
## a copy of the License at
##
##        http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
## WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
## License for the specific language governing permissions and limitations
## under the License.

from __future__ import division, print_function


import sys
import traceback

from os.path            import expanduser
from argparse           import ArgumentParser

from pysam              import VariantFile, Fastafile

from vgraph.norm        import NormalizedLocus
from vgraph.intervals   import union
from vgraph.match       import variants_by_chromosome, get_superlocus_bounds, superlocus_equal


def tryint(s):
    '''Try to convert s into an integer.  Otherwise return s unchanged.

    >>> tryint(1)
    1
    >>> tryint('1')
    1
    >>> tryint('one')
    'one'
    '''
    try:
        return int(s)
    except ValueError:
        return s


def parse_args():
    parser = ArgumentParser()
    parser.add_argument('vcf1', help='VCF/BCF input 1 (- for stdin)')
    parser.add_argument('vcf2', help='VCF/BCF input 2 (- for stdin)')
    parser.add_argument('--out1', help='VCF/BCF output 1')
    parser.add_argument('--out2', help='VCF/BCF output 2')
    parser.add_argument('--name1', metavar='N', default=0, type=tryint,
                        help='Name or index of sample in vcf1 (default=0)')
    parser.add_argument('--name2', metavar='N', default=0, type=tryint,
                        help='Name or index of sample in vcf2 (default=0)')
    parser.add_argument('-p', '--reference-padding', metavar='N', default=3,
                        help='Force loci within N bp into the same super locus (default=3)')
    parser.add_argument('--include-regions', metavar='BED', help='BED file of regions to include in comparison')
    parser.add_argument('--exclude-regions', metavar='BED', help='BED file of regions to exclude from comparison')
    parser.add_argument('--include-file-regions', metavar='BED', action='append',
                        help='BED file of regions to include for each input file')
    parser.add_argument('--exclude-file-regions', metavar='BED', action='append',
                        help='BED file of regions to exclude from comparison for each input file')
    parser.add_argument('--include-filter', metavar='F', action='append',
                        help='Include records with filter status F.  Option may be specified multiple times or F can be comma delimited')
    parser.add_argument('--exclude-filter', metavar='F', action='append',
                        help='Exclude records with filter status F.  Option may be specified multiple times or F can be comma delimited')
    parser.add_argument('--min-gq', metavar='N', type=int,
                        help='Exclude records with genotype quality (GQ) < N')
    #parser.add_argument('-o', '--out-vcf', default='-', help='Output VCF (- for stdout)')
    parser.add_argument('--reference', metavar='FASTA', required=True, help='Reference FASTA+FAI')
    parser.add_argument('--debug', action='store_true', help='Output extremely verbose debugging information')
    parser.add_argument('--profile', action='store_true', help='Profile code performance')

    return parser.parse_args()


def main(args):
    # Load FASTA reference
    refs = Fastafile(expanduser(args.reference))

    # Open input variant files
    in_vars = [VariantFile(var) for var in [args.vcf1, args.vcf2]]

    out_vars = [None, None]

    if args.out1:
        in_vars[0].header.formats.add('BD', '1', 'String', 'Match decision for call (match: =, mismatch: X, error: N)')
        in_vars[0].header.formats.add('BK', '1', 'String', 'Sub-type for match decision (trivial: T, haplotype: H, error: N)')
        out_vars[0] = VariantFile(args.out1, 'w', header=in_vars[0].header)

    if args.out2:
        in_vars[1].header.formats.add('BD', '1', 'String', 'Match decision for call (match: =, mismatch: X, error: N)')
        in_vars[1].header.formats.add('BK', '1', 'String', 'Sub-type for match decision (trivial: T, haplotype: H, error: N)')
        out_vars[1] = VariantFile(args.out2, 'w', header=in_vars[1].header)

    match_status_map = {True : '=', False : 'X', None : '.'}

    # Create parallel locus iterator by chromosome
    for chrom, ref, loci in variants_by_chromosome(refs, in_vars, [args.name1, args.name2], args):
        # Create superloci by taking the union of overlapping loci across all of the locus streams
        superloci = union(loci, min_distance=args.reference_padding)

        # Proceed by superlocus
        for _, _, (super1, super2) in superloci:
            super1.sort(key=NormalizedLocus.left_order_key)
            super2.sort(key=NormalizedLocus.left_order_key)

            # Bounds come from left normalized extremes
            start, stop = get_superlocus_bounds([super1, super2])

            print('-'*80)
            print('{}:[{:d}-{:d}):'.format(chrom, start, stop))
            print()

            for i, (name, superlocus) in enumerate([(args.name1, super1), (args.name2, super2)], 1):
                for locus in superlocus:
                    lstart = locus.left.start
                    lstop = locus.left.stop
                    indices = locus.allele_indices
                    sep = '|' if locus.phased else '/'
                    geno = sep.join(locus.left.alleles[a] or '-' if a is not None else '.' for a in indices)
                    print('  NORM{:d}: [{:5d}-{:5d}) ref={} geno={}'.format(i, lstart, lstop, locus.left.alleles[0] or '-', geno))
            print()

            match, match_type = superlocus_equal(ref, start, stop, super1, super2, debug=args.debug)
            match_status = match_status_map[match]

            print('    MATCH={} TYPE={}'.format(match_status, match_type))
            print()

            # The hard work is done.  The rest is just output and formatting...

            if out_vars[0]:
                for locus in sorted(super1, key=NormalizedLocus.record_order_key):
                    locus.record.samples[args.name1]['BD'] = match_status
                    locus.record.samples[args.name1]['BK'] = match_type
                    out_vars[0].write(locus.record)

            if out_vars[1]:
                for locus in sorted(super2, key=NormalizedLocus.record_order_key):
                    locus.record.samples[args.name2]['BD'] = match_status
                    locus.record.samples[args.name2]['BK'] = match_type
                    out_vars[1].write(locus.record)

            for i, superlocus in enumerate([super1, super2], 1):
                for locus in superlocus:
                    print('  VCF{:d}: {}'.format(i, locus.record), end='')
            print()

            if match == 'N':
                traceback.print_exc(file=sys.stdout)
                print()

    for out_var in out_vars:
        if out_var is not None:
            out_var.close()


if __name__ == '__main__':
    args = parse_args()
    if args.profile:
        import yappi
        yappi.start()
        main(args)
        yappi.stop()
        stats = yappi.get_func_stats().sort('tsub').strip_dirs()
        stats.print_all(out=sys.stderr, columns={0: ('name', 45), 1: ('ncall', 10), 2: ('tsub', 8), 3: ('ttot', 8), 4: ('tavg', 8)})
    else:
        main(args)
